package com.anb.pos.support;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.TextView;

import com.anb.pos.R;

import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 * Created by Bhaumik on 16/03/17.
 */

public class Utils {
    private static final Utils ourInstance = new Utils();

    private static ProgressDialog mDialog;


    public static Utils getInstance() {
        return ourInstance;
    }

    private Utils() {
    }

    /**
     * Hide the soft keyboard from screen for edit text only
     *
     * @param mContext
     * @param view
     */
    public static void hideSoftKeyBoard(Context mContext, View view) {

        try {

            final InputMethodManager imm = (InputMethodManager) mContext.getSystemService(Context.INPUT_METHOD_SERVICE);
            if (imm != null) {
                imm.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
            }
        } catch (Exception e) {

            e.printStackTrace();
        }
    }

    /**
     * Displays the progress dialog on activity.
     * This method will generate progress dialog and displays it on screen if its not currently showing,
     * If the progressbar dialog already been showing than it will not generate new dialog and return old generated dialog.
     *
     * @param mContext     requires to create ProgressDialog in Application
     * @param message      displays the message on Progress Dialog
     * @param isCancelable Set cancelable property of progress dialog
     * @return Returns the object of Progress dialog that currently generated or previously generated.
     */
    public ProgressDialog showProgressDialog(final Context mContext, final String message, boolean isCancelable) {
        if (mDialog == null) {
            mDialog = new ProgressDialog(mContext);
        }
        if (!mDialog.isShowing()) {
            mDialog = new ProgressDialog(mContext);
            mDialog.show();
        }
        mDialog.setCancelable(isCancelable);
        mDialog.setCanceledOnTouchOutside(false);
        mDialog.setMessage(message);
        return mDialog;
    }

    /**
     * Dismiss Progress dialog if it is showing
     */
    public void dismissProgressDialog() {
        if (mDialog != null && mDialog.isShowing()) {
            mDialog.dismiss();
        }
    }


    /**
     * Displays information dialog on screen.
     * <p>
     * This method will display simple alert dialog on screen with message provided by user,
     * if the message is null or blank than it will not generate dialog.</p>
     *
     * @param mActivity requires for creating Alert Dialog Object.
     * @param message   displays message on dialog, must be not null and not empty.
     * @return Object of {link AlertDialog.Builder} that generated by this method.
     */
    public AlertDialog.Builder displayMessageDialog(final Context mActivity, final String message) {
        final AlertDialog.Builder dialog = new AlertDialog.Builder(mActivity).setMessage(message)
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
        dialog.show();
        return dialog;
    }


    /**
     * Hides keyboard from screen if it is showing
     *
     * @param mActivity requires for checking keyboard is open or not
     */
    public static void hideSoftKeyBoard(Activity mActivity) {
        if (mActivity != null && !mActivity.isFinishing()) {
            final InputMethodManager inputMethodManager = (InputMethodManager) mActivity.getSystemService(Activity.INPUT_METHOD_SERVICE);
            if (inputMethodManager.isActive()) {
                if (mActivity.getCurrentFocus() != null) {
                    inputMethodManager.hideSoftInputFromWindow(mActivity.getCurrentFocus().getWindowToken(), 0);
                }
            }
        }
    }


    public static void setDateChooserPropertyInit(TextView jcmbDate) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar cal = Calendar.getInstance();
        jcmbDate.setText(sdf.format(cal.getTime()));
    }


    public static String getDateChooserPropertyInit() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar cal = Calendar.getInstance();
        return sdf.format(cal.getTime());
    }

    public static String ConvertDateFormetForDBForConcurrency(String strOrgDate) throws Exception {
        //Changed
        String strConvDate = "";
        //try
        //{
        strOrgDate = strOrgDate.trim();
        if (!strOrgDate.startsWith("/")) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date dt = sdf.parse(strOrgDate);
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd/MM/yyyy");
            strConvDate = sdf2.format(dt);
        }
        //} catch(Exception ex){
        //printToLogFile("Error in ConvertDateFormetForDB in clSysLib...:",ex);
        //}
        return strConvDate;
    }

    public static String ConvertDateFormetForDB(String strOrgDate) {
        //Changed
        String strConvDate = "";
        try {
            strOrgDate = strOrgDate.trim();
            if (!strOrgDate.startsWith("/")) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dt = sdf.parse(strOrgDate);
                SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
                strConvDate = sdf2.format(dt);
            }
        } catch (Exception ex) {
        }
        return strConvDate;
    }
}
